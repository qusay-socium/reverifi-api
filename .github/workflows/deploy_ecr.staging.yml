# CHANGE THE TARGET [ECS_TASK] and [ECS_TASK_SERVICE] se
#  name: Deploy to Amazon ECR - Staging

#  on:
#    push:
#      branches:
#        - master

#  env:
#     ECR_REPO:  at_${{ github.event.repository.name }}_staging
#     TASK_DEFINITION: at-staging-${{ github.event.repository.name }}
#     SERVICE: [ECS_TASK_SERVICE]
#     CLUSTER: AT-BackendECS-staging

#  jobs:
#    deploy:
#      name: Deploy
#      runs-on: ubuntu-latest

#      steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          ref: 'master'

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_REPO }} # Suggest to use the repo name here as a variable to be read
#          IMAGE_TAG: latest # ${{ github.sha }} or a version based on date/time of build
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json

#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ github.event.repository.name }}
#          image: ${{ steps.build-image.outputs.image }}

#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.SERVICE }}
#          cluster: ${{ env.CLUSTER }}
#          wait-for-service-stability: true

#      - name: Report Status
#        if: always()
#        uses: ravsamhq/notify-slack-action@master
#        with:
#          status: ${{ job.status }}
#          notify_when: 'success,failure,warnings'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

